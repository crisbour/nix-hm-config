# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
      ../common/optional/encrypted-root.nix
      ../common/optional/ephemeral-btrfs.nix
    ];

    boot.initrd = {
      availableKernelModules = [
        "nvme"
        "xhci_pci"
        "ahci"
        "usb_storage"
        "sd_mod"
        # TODO Decide what the followings are useful for
        "rtsx_pci_sdmmc"
        "virtio_pci"
        "virtio_blk"
      ];
    kernelModules = [ ];
  };

  # vhost_vsock: Enables the capacity to launch vm with a virtual socket (network)
  boot.kernelModules = [ "kvm-intel" "vhost_vsock"];
  boot.extraModulePackages = [ ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # TODO Setup keyfile
  #boot.initrd.secrets = {
  #  "/crypto_keyfile.bin" = null;
  #};

  # ip forwarding is needed for NAT'ing to work.
  boot.kernel.sysctl = {
    "net.ipv4.conf.all.forwarding" = true;
    "net.ipv4.conf.default.forwarding" = true;
  };

  boot.kernelParams = [
    "mem_sleep_default=deep"
  ];

  fileSystems = {
    "/boot" = {
      device = "/dev/disk/by-label/ESP";
      fsType = "vfat";
    };
  };

  swapDevices = [
    {
      device = "/swap/swapfile";
      size = 32768;
    }
  ];

  # Enable hibernation
  #swapDevices = [
  #  { device = "/dev/disk/by-uuid/your-swap-uuid"; }
  #];
  #powerManagement.resumeCommands = ''
  #  cryptsetup open /dev/disk/by-uuid/your-luks-uuid root
  #'';
  #powerManagement.hibernateCommands = ''
  #  mount -o subvol=@ /dev/mapper/root /mnt
  #  btrfs filesystem sync /mnt
  #  umount /mnt
  #'';

  nixpkgs.hostPlatform.system = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
