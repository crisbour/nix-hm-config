#+title: Nix Home-Manager path
#+author: Cristian Bourceanu
#+email: cristi.bourceanu@protonmail.com

Here are notes while trying to get home-manager setup for my environment, container or remote instances.

After a lot of fiddling with ~nix~ and ~home-manager~ installation, there are subtle differences and approaches that lead to the foresight of having a =reproducible, composable and reusable= environment.

* NIX
** Installation: Single vs Multiple user
While nix is part of multiple-user enviroment and it is prefered, multiple user installation might not be possible due to privileges such as in a shared linux/VM or inside a container, such as the LXD container used to test this repository.

Otherwise, for single-user installation, home-manager packages might conflict due to a priority error on the same package name. One solution is to set ~nix~ to a different priority level than ~home-manager~.
#+begin_src
nix-env set-flag --priority <another_level> nix
#+end_src

** Reproducible

In order to keep track of the versions used, I identified 2 methods so far: ~flake~ and ~niv~.
- ~niv~ will keep track of the dependencies in ~shell.nix~ in ~/nix/sources.json~
- ~flake~ will similarly keep dependencies versions and hashes in ~flake.lock~

*** TODO Flake HM
- [ ] Read about Flake
- [ ] Flake shell.nix
- [t] Flake for Home-Manager

** Home-Manager

The official [[https://nix-community.github.io/home-manager/][Home-Manager Guide]] provides an excelent resource for this, guiding through:
- install
- switch, generations and rollbacks
- XDG for integration with the DM
- etc

However, the above guide does not provide insight into implementation choices, but luckly
Nix has become quite popular and numerous blog posts can be found that talk about this and show their solutions:

- [[https://www.bekk.christmas/post/2021/16/dotfiles-with-nix-and-home-manager][Declarative managment of dotfile with Nix]]
- [[https://www.lafuente.me/posts/installing-home-manager/][Custom HM in NixOS]]: Represents a reproducible home-manager configuration
- [[https://github.com/ryantm/home-manager-template][home-manager-template]]
- [ ] [[https://www.chrisportela.com/posts/home-manager-flake/][home-manager-flake]]: Setting up dotfiles with home-manager as flake
  -- [[https://www.tweag.io/blog/2020-05-25-flakes/][Tutorial to flakes]]

*** Niv: run HM without installing it

[[https://github.com/ryantm/home-manager-template][home-manager-tempalte]]


*** Flakes

It appears there might be some priority conflicts for HM using flake. Thist could be the same issue as the single install. The issue can be found here https://github.com/nix-community/home-manager/issues/2848

*** Github Projects: HM + Flakes

- https://github.com/the-nix-way/home-manager-config-template
- https://github.com/Misterio77/nix-starter-configs
- https://github.com/fufexan/dotfiles
- https://github.com/MatthiasBenaets/nixos-config
- https://github.com/MatthiasBenaets/nixos-config
- https://github.com/lucperkins/nix-home-manager-config


** fromYAML

Bring in configuration from yaml file might be necesarry sometime (i.e. alacritty). There are 2 approaches to this:
 - Convert *YAML* to *JSON* then use the src_nix[bultin]{importJSON} to import the JSON as an atrtribute: https://github.com/search?p=1&q=fromYaml+language%3Anix&type=Code
- Alterntively we can link the conf file directly and not set the options in nix:[[https://github.com/gytis-ivaskevicius/nixfiles/blob/2b2abcd07ede0df56360a8cda50a919a65864f8c/overlays/g-alacritty/default.nix][call with explicit config file path]]. This might also help with writing the conf file and have effect without having to produce a new derivation

** TODO Julia setup
At the moment I have just included julia as a package part of the HM setup,
however, more advanced setups for reproducibility might be necessary as in
[Scientific-FHS](https://github.com/olynch/scientific-fhs)
- [ ] Setup Julia with JupyterNB and default packages

** TODO TMUX
- [ ] Add renumber shortcut:
  #+begin_src
  bind R                                      \
      set -g renumber-windows on\;            \
      new-window\; kill-window\;              \
      set -g renumber-windows off\;           \
      display-message "Windows reordered..."
  #+end_src

* Hosts
** LXD
Nix uses some form of containers, sandbox or namespaces (which I don't know their underlying functionality), but in order for running nix isolated, it requires that nested containers are enabled for the host container. Configure it as follows:

#+begin_src
lxc config set <container_name> security.nesting true
#+end_src
